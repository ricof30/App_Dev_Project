{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"bordered\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.handleFileUpload && $options.handleFileUpload(...args))\n  }, null, 32 /* HYDRATE_EVENTS */), $data.data ? (_openBlock(), _createElementBlock(\"table\", _hoisted_1, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.columns, (column, columnIndex) => {\n    return _openBlock(), _createElementBlock(\"th\", {\n      key: columnIndex\n    }, _toDisplayString(column), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.data.slice(1), (row, rowIndex) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: rowIndex\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (cell, columnIndex) => {\n      return _openBlock(), _createElementBlock(\"td\", {\n        key: columnIndex\n      }, _toDisplayString(cell), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","type","onChange","_cache","args","$options","handleFileUpload","$data","data","_hoisted_1","_Fragment","_renderList","columns","column","columnIndex","key","_toDisplayString","slice","row","rowIndex","cell"],"sources":["C:\\laragon\\www\\frontend\\src\\views\\Upload.vue"],"sourcesContent":["<!-- <template>\r\n  <div>\r\n    <input type=\"file\" @change=\"handleFileUpload\" />\r\n    <table v-if=\"data\">\r\n      <thead>\r\n        <tr>\r\n          <th>Row</th>\r\n          <th>Column</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(row, rowIndex) in data\" :key=\"rowIndex\">\r\n          <td v-for=\"(cell, columnIndex) in row\" :key=\"columnIndex\">{{ cell }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport XLSX from 'xlsx';\r\nexport default {\r\n  name:'Upload',\r\n  data() {\r\n    return {\r\n      data: null\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    async handleFileUpload(event) {\r\n      const file = event.target.files[0];\r\n\r\n      const formData = new FormData();\r\n      formData.append('excelFile', file);\r\n\r\n      try {\r\n        const response = await axios.post('/upload', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          // const data = await this.parseExcelData(file);\r\n          const excelData = response.data.data;\r\n        this.data = excelData;\r\n        } else {\r\n          console.error('Error uploading file.');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async parseExcelData(file) {\r\n      const workbook = XLSX.readFile(file);\r\n      const firstSheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[firstSheetName];\r\n\r\n      const data = XLSX.utils.sheet_to_json(worksheet, { raw: true });\r\n      return data;\r\n    }\r\n  }\r\n};\r\n</script> -->\r\n\r\n<template>\r\n  <div>\r\n    <input type=\"file\" @change=\"handleFileUpload\" />\r\n    <table v-if=\"data\" class=\"bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th v-for=\"(column, columnIndex) in columns\" :key=\"columnIndex\">{{ column }}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(row, rowIndex) in data.slice(1)\" :key=\"rowIndex\">\r\n          <td v-for=\"(cell, columnIndex) in row\" :key=\"columnIndex\">{{ cell }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport XLSX from 'xlsx';\r\n\r\nexport default {\r\n  name: 'Upload',\r\n  data() {\r\n    return {\r\n      data: null,\r\n      columns: null,\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    async handleFileUpload(event) {\r\n      const file = event.target.files[0];\r\n\r\n      const formData = new FormData();\r\n      formData.append('excelFile', file);\r\n\r\n      try {\r\n        const response = await axios.post('/upload', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          const excelData = response.data.data;\r\n          this.data = excelData;\r\n          this.columns = this.extractColumns(excelData);\r\n        } else {\r\n          console.error('Error uploading file.');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    extractColumns(data) {\r\n      // Assuming the first row of the Excel file contains the column names\r\n      const firstRow = data[0];\r\n      return Object.keys(firstRow);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n"],"mappings":";;;EAwEuBA,KAAK,EAAC;;;uBAF3BC,mBAAA,CAcM,cAbJC,mBAAA,CAAgD;IAAzCC,IAAI,EAAC,MAAM;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,gBAAA,IAAAD,QAAA,CAAAC,gBAAA,IAAAF,IAAA,CAAgB;qCAC/BG,KAAA,CAAAC,IAAI,I,cAAjBT,mBAAA,CAWQ,SAXRU,UAWQ,GAVNT,mBAAA,CAIQ,gBAHNA,mBAAA,CAEK,c,kBADHD,mBAAA,CAAiFW,SAAA,QAAAC,WAAA,CAA7CJ,KAAA,CAAAK,OAAO,GAA/BC,MAAM,EAAEC,WAAW;yBAA/Bf,mBAAA,CAAiF;MAAnCgB,GAAG,EAAED;IAAW,GAAAE,gBAAA,CAAKH,MAAM;sCAG7Eb,mBAAA,CAIQ,iB,kBAHND,mBAAA,CAEKW,SAAA,QAAAC,WAAA,CAFyBJ,KAAA,CAAAC,IAAI,CAACS,KAAK,MAA5BC,GAAG,EAAEC,QAAQ;yBAAzBpB,mBAAA,CAEK;MAFyCgB,GAAG,EAAEI;IAAQ,K,kBACzDpB,mBAAA,CAAyEW,SAAA,QAAAC,WAAA,CAAvCO,GAAG,GAAzBE,IAAI,EAAEN,WAAW;2BAA7Bf,mBAAA,CAAyE;QAAjCgB,GAAG,EAAED;MAAW,GAAAE,gBAAA,CAAKI,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}