{"ast":null,"code":"export default {\n  methods: {\n    async uploadFile() {\n      try {\n        const fileInput = this.$refs.fileInput;\n        const file = fileInput.files[0];\n        if (!file) {\n          console.error('No file selected');\n          return;\n        }\n        const formData = new FormData();\n        formData.append('file', file);\n        const response = await fetch('http://localhost:8000/upload', {\n          method: 'POST',\n          body: formData\n        });\n        if (response.ok) {\n          console.log('File uploaded successfully.');\n        } else {\n          console.error('File upload failed.');\n        }\n      } catch (error) {\n        console.error('Internal server error:', error.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["methods","uploadFile","fileInput","$refs","file","files","console","error","formData","FormData","append","response","fetch","method","body","ok","log","message"],"sources":["C:\\laragon\\www\\frontend\\src\\views\\Upload.vue"],"sourcesContent":["<!-- <template>\r\n    <div>\r\n      <input type=\"file\" ref=\"fileInput\" @change=\"handleFileUpload\" accept=\".xlsx, .xls\" />\r\n  \r\n      <table v-if=\"excelData.length > 0\" border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th v-for=\"(key, index) in Object.keys(excelData[0])\" :key=\"index\">{{ key }}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"row in excelData\" :key=\"row._rowNumber\">\r\n            <td v-for=\"key in Object.keys(excelData[0])\" :key=\"key\">{{ row[key] }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import * as XLSX from 'xlsx';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        excelData: [],\r\n      };\r\n    },\r\n    methods: {\r\n      handleFileUpload() {\r\n        const fileInput = this.$refs.fileInput;\r\n        const file = fileInput.files[0];\r\n  \r\n        if (file) {\r\n          this.readExcelFile(file);\r\n        }\r\n      },\r\n      readExcelFile(file) {\r\n        const reader = new FileReader();\r\n  \r\n        reader.onload = (e) => {\r\n          const data = new Uint8Array(e.target.result);\r\n          const workbook = XLSX.read(data, { type: 'array' });\r\n  \r\n          // Assuming the first sheet is the target\r\n          const sheetName = workbook.SheetNames[0];\r\n          const sheet = workbook.Sheets[sheetName];\r\n  \r\n          // Convert sheet data to JSON\r\n          const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });\r\n  \r\n          // Debugging: Log header and rows\r\n          console.log('Header:', jsonData[0]);\r\n          console.log('Rows:', jsonData.slice(1));\r\n  \r\n          // Extract header and data\r\n          const [header, ...rows] = jsonData;\r\n  \r\n          // Create an array of objects with headers as keys\r\n          this.excelData = rows.map((row, index) => {\r\n            const rowData = {};\r\n            header.forEach((key, columnIndex) => {\r\n              rowData[key] = row[columnIndex];\r\n            });\r\n            // Add a unique key for each row\r\n            rowData._rowNumber = index + 1;\r\n            return rowData;\r\n          });\r\n  \r\n          // Debugging: Log the processed Excel data\r\n          console.log('Processed Excel Data:', this.excelData);\r\n        };\r\n  \r\n        reader.readAsArrayBuffer(file);\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n   -->\r\n\r\n   <template>\r\n    <div>\r\n      <h2>Upload Excel File</h2>\r\n  \r\n      <form @submit.prevent=\"uploadFile\">\r\n        <label for=\"file\">Select Excel File:</label>\r\n        <input type=\"file\" id=\"file\" ref=\"fileInput\" accept=\".xlsx, .xls\" required>\r\n        <br>\r\n        <button type=\"submit\">Upload</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    methods: {\r\n      async uploadFile() {\r\n        try {\r\n          const fileInput = this.$refs.fileInput;\r\n          const file = fileInput.files[0];\r\n  \r\n          if (!file) {\r\n            console.error('No file selected');\r\n            return;\r\n          }\r\n  \r\n          const formData = new FormData();\r\n          formData.append('file', file);\r\n  \r\n          const response = await fetch('http://localhost:8000/upload', {\r\n            method: 'POST',\r\n            body: formData,\r\n          });\r\n  \r\n          if (response.ok) {\r\n            console.log('File uploaded successfully.');\r\n          } else {\r\n            console.error('File upload failed.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Internal server error:', error.message);\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add your custom styles here */\r\n  </style>\r\n  "],"mappings":"AA8FE,eAAe;EACbA,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMC,SAAQ,GAAI,IAAI,CAACC,KAAK,CAACD,SAAS;QACtC,MAAME,IAAG,GAAIF,SAAS,CAACG,KAAK,CAAC,CAAC,CAAC;QAE/B,IAAI,CAACD,IAAI,EAAE;UACTE,OAAO,CAACC,KAAK,CAAC,kBAAkB,CAAC;UACjC;QACF;QAEA,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEN,IAAI,CAAC;QAE7B,MAAMO,QAAO,GAAI,MAAMC,KAAK,CAAC,8BAA8B,EAAE;UAC3DC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEN;QACR,CAAC,CAAC;QAEF,IAAIG,QAAQ,CAACI,EAAE,EAAE;UACfT,OAAO,CAACU,GAAG,CAAC,6BAA6B,CAAC;QAC5C,OAAO;UACLV,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;QACtC;MACF,EAAE,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACU,OAAO,CAAC;MACxD;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}