{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container-scroller\"\n};\nconst _hoisted_2 = {\n  class: \"container-fluid page-body-wrapper\"\n};\nconst _hoisted_3 = {\n  class: \"main-panel\"\n};\nconst _hoisted_4 = {\n  class: \"content-wrapper pb-0\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"bordered\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createCommentVNode(\" <th v-for=\\\"(column, columnIndex) in columns\\\" :key=\\\"columnIndex\\\">{{ column }}</th> \")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Header = _resolveComponent(\"Header\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_Header), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", null, [_createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.handleFileUpload && $options.handleFileUpload(...args))\n  }, null, 32 /* HYDRATE_EVENTS */), $data.data ? (_openBlock(), _createElementBlock(\"table\", _hoisted_5, [_hoisted_6, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.data, (row, rowIndex) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: rowIndex\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (cell, columnIndex) => {\n      return _openBlock(), _createElementBlock(\"td\", {\n        key: columnIndex\n      }, _toDisplayString(cell), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)])])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createCommentVNode","_createElementBlock","_hoisted_1","_createVNode","_component_Header","_hoisted_2","_hoisted_3","_hoisted_4","type","onChange","_cache","args","$options","handleFileUpload","$data","data","_hoisted_5","_hoisted_6","_Fragment","_renderList","row","rowIndex","key","cell","columnIndex","_toDisplayString"],"sources":["C:\\laragon\\www\\frontend\\src\\views\\Upload.vue"],"sourcesContent":["<!-- <template>\r\n  <div>\r\n    <input type=\"file\" @change=\"handleFileUpload\" />\r\n    <table v-if=\"data\">\r\n      <thead>\r\n        <tr>\r\n          <th>Row</th>\r\n          <th>Column</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(row, rowIndex) in data\" :key=\"rowIndex\">\r\n          <td v-for=\"(cell, columnIndex) in row\" :key=\"columnIndex\">{{ cell }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport XLSX from 'xlsx';\r\nexport default {\r\n  name:'Upload',\r\n  data() {\r\n    return {\r\n      data: null\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    async handleFileUpload(event) {\r\n      const file = event.target.files[0];\r\n\r\n      const formData = new FormData();\r\n      formData.append('excelFile', file);\r\n\r\n      try {\r\n        const response = await axios.post('/upload', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          // const data = await this.parseExcelData(file);\r\n          const excelData = response.data.data;\r\n        this.data = excelData;\r\n        } else {\r\n          console.error('Error uploading file.');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async parseExcelData(file) {\r\n      const workbook = XLSX.readFile(file);\r\n      const firstSheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[firstSheetName];\r\n\r\n      const data = XLSX.utils.sheet_to_json(worksheet, { raw: true });\r\n      return data;\r\n    }\r\n  }\r\n};\r\n</script> -->\r\n<!-- \r\n<template>\r\n  <div>\r\n    <input type=\"file\" @change=\"handleFileUpload\" />\r\n    <table v-if=\"data\" class=\"bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th v-for=\"(column, columnIndex) in columns\" :key=\"columnIndex\">{{ column }}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(row, rowIndex) in data\" :key=\"rowIndex\">\r\n          <td v-for=\"(cell, columnIndex) in row\" :key=\"columnIndex\">{{ cell }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport XLSX from 'xlsx';\r\n\r\nexport default {\r\n  name: 'Upload',\r\n  data() {\r\n    return {\r\n      data: null,\r\n      columns: null,\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    async handleFileUpload(event) {\r\n      const file = event.target.files[0];\r\n\r\n      const formData = new FormData();\r\n      formData.append('excelFile', file);\r\n\r\n      try {\r\n        const response = await axios.post('/upload', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          const excelData = response.data.data;\r\n          this.data = excelData;\r\n          this.columns = this.extractColumns(excelData);\r\n        } else {\r\n          console.error('Error uploading file.');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    extractColumns(data) {\r\n      // Assuming the first row of the Excel file contains the column names\r\n      const firstRow = data[0];\r\n      return Object.keys(firstRow);\r\n    },\r\n  },\r\n};\r\n</script> -->\r\n\r\n<template>\r\n  <div class=\"container-scroller\">\r\n      <Header/>\r\n      <div class=\"container-fluid page-body-wrapper\">\r\n          <div class=\"main-panel\">\r\n            <div class=\"content-wrapper pb-0\">\r\n              <div>\r\n                <input type=\"file\" @change=\"handleFileUpload\" />\r\n                <table v-if=\"data\" class=\"bordered\">\r\n                  <thead>\r\n                    <tr>\r\n                      <!-- <th v-for=\"(column, columnIndex) in columns\" :key=\"columnIndex\">{{ column }}</th> -->\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"(row, rowIndex) in data\" :key=\"rowIndex\">\r\n                      <td v-for=\"(cell, columnIndex) in row\" :key=\"columnIndex\">{{ cell }}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Header from '../components/AdminHeader.vue';\r\nimport axios from 'axios';\r\n    export default {\r\n      components:{Header},\r\n        name: 'Upload',\r\n        data() {\r\n    return {\r\n      data: null,\r\n      columns: null,\r\n    };\r\n  },\r\n    \r\n \r\n\r\n  methods: {\r\n    async handleFileUpload(event) {\r\n      const file = event.target.files[0];\r\n\r\n      const formData = new FormData();\r\n      formData.append('excelFile', file);\r\n\r\n      try {\r\n        const response = await axios.post('/upload', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          const excelData = response.data.data;\r\n          this.data = excelData;\r\n          this.columns = this.extractColumns(excelData);\r\n        } else {\r\n          console.error('Error uploading file.');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    extractColumns(data) {\r\n      // Assuming the first row of the Excel file contains the column names\r\n      const firstRow = data[0];\r\n      return Object.keys(firstRow);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":";;EAwIOA,KAAK,EAAC;AAAoB;;EAEtBA,KAAK,EAAC;AAAmC;;EACrCA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAsB;;;EAGVA,KAAK,EAAC;;gCACvBC,mBAAA,CAIQ,gB,aAHNA,mBAAA,CAEK,a,aADHC,mBAAA,2FAA0F,C;;;;uBAV9GC,mBAAA,CAuBM,OAvBNC,UAuBM,GAtBFC,YAAA,CAASC,iBAAA,GACTL,mBAAA,CAoBM,OApBNM,UAoBM,GAnBFN,mBAAA,CAkBM,OAlBNO,UAkBM,GAjBJP,mBAAA,CAgBM,OAhBNQ,UAgBM,GAfJR,mBAAA,CAcM,cAbJA,mBAAA,CAAgD;IAAzCS,IAAI,EAAC,MAAM;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,gBAAA,IAAAD,QAAA,CAAAC,gBAAA,IAAAF,IAAA,CAAgB;qCAC/BG,KAAA,CAAAC,IAAI,I,cAAjBd,mBAAA,CAWQ,SAXRe,UAWQ,GAVNC,UAIQ,EACRlB,mBAAA,CAIQ,iB,kBAHNE,mBAAA,CAEKiB,SAAA,QAAAC,WAAA,CAFyBL,KAAA,CAAAC,IAAI,GAAtBK,GAAG,EAAEC,QAAQ;yBAAzBpB,mBAAA,CAEK;MAFgCqB,GAAG,EAAED;IAAQ,K,kBAChDpB,mBAAA,CAAyEiB,SAAA,QAAAC,WAAA,CAAvCC,GAAG,GAAzBG,IAAI,EAAEC,WAAW;2BAA7BvB,mBAAA,CAAyE;QAAjCqB,GAAG,EAAEE;MAAW,GAAAC,gBAAA,CAAKF,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}