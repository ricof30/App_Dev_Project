{"ast":null,"code":"import axios from 'axios';\nexport default {\n  computed: {\n    id() {\n      return localStorage.getItem('id');\n    }\n  },\n  data() {\n    return {\n      newPassword: '',\n      confirmPassword: '',\n      isValidPassword: true,\n      isValidRepeatPassword: true\n    };\n  },\n  methods: {\n    async submitForm() {\n      this.isValidPassword = this.password.length >= 8;\n      this.isValidRepeatPassword = this.password === this.repeatPassword;\n      const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@#])[A-Za-z\\d@#]+$/;\n      if (!passwordRegex.test(this.password)) {\n        this.isValidPassword = false;\n        this.passwordError = 'Password must contain at least one letter, one number, and one character';\n      }\n      if (this.isValidFullName && this.isValidEmail && this.isValidPassword && this.isValidRepeatPassword) {\n        try {\n          // Use this.id to access the id data property\n          const inf = await axios.post(`/update/${this.id}`, {\n            newPassword: this.newPassword,\n            confirmPassword: this.confirmPassword\n          });\n          console.log('Update response:', inf.data);\n\n          // Clear the form fields after submission\n          this.newPassword = '';\n          this.confirmPassword = '';\n\n          // Add your logic for handling the submission, such as showing a confirmation message to the user.\n        } catch (error) {\n          console.error('Error updating password:', error.response.data);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","computed","id","localStorage","getItem","data","newPassword","confirmPassword","isValidPassword","isValidRepeatPassword","methods","submitForm","password","length","repeatPassword","passwordRegex","test","passwordError","isValidFullName","isValidEmail","inf","post","console","log","error","response"],"sources":["C:\\laragon\\www\\frontend\\src\\components\\admin\\update_password.vue"],"sourcesContent":["<template>\r\n    <div class=\"container mt-5\">\r\n      <div class=\"row justify-content-center\">\r\n        <div class=\"col-md-6\">\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n              <h2 class=\"text-center mb-4\">Update Password</h2>\r\n              <form @submit.prevent=\"submitForm\">\r\n                <div class=\"form-group\">\r\n                  <input type=\"hidden\" v-model=\"id\">\r\n                  <label for=\"newPassword\">New Password</label>\r\n                  <input type=\"password\" class=\"form-control\" v-model=\"newPassword\" required />\r\n                  <span v-if=\"!isValidPassword\" class=\"text-danger\">{{ passwordError || 'Please enter a valid password' }}</span>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <label for=\"confirmPassword\">Confirm New Password</label>\r\n                  <input type=\"password\" class=\"form-control\" v-model=\"confirmPassword\" required />\r\n                  <span v-if=\"!isValidRepeatPassword\" class=\"text-danger\">Passwords do not match</span>\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary btn-block mt-4\">Update Password</button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    computed: {\r\n      id() {\r\n        return localStorage.getItem('id');\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        newPassword: '',\r\n        confirmPassword: '',\r\n        isValidPassword: true,\r\n          isValidRepeatPassword: true,\r\n      };\r\n    },\r\n    methods: {\r\n      async submitForm() {\r\n        this.isValidPassword = this.password.length >= 8; \r\n          this.isValidRepeatPassword = this.password === this.repeatPassword;\r\n         \r\n\r\n          const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@#])[A-Za-z\\d@#]+$/;\r\n        if (!passwordRegex.test(this.password)) {\r\n          this.isValidPassword = false;\r\n          this.passwordError = 'Password must contain at least one letter, one number, and one character';\r\n        }\r\n    \r\n          \r\n          if (this.isValidFullName && this.isValidEmail && this.isValidPassword && this.isValidRepeatPassword) {\r\n        try {\r\n          // Use this.id to access the id data property\r\n          const inf = await axios.post(`/update/${this.id}`, {\r\n            newPassword: this.newPassword,\r\n            confirmPassword: this.confirmPassword,\r\n          });\r\n  \r\n          console.log('Update response:', inf.data);\r\n  \r\n          // Clear the form fields after submission\r\n          this.newPassword = '';\r\n          this.confirmPassword = '';\r\n  \r\n          // Add your logic for handling the submission, such as showing a confirmation message to the user.\r\n        } catch (error) {\r\n          console.error('Error updating password:', error.response.data);\r\n        }\r\n    }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add custom styles or override Bootstrap styles here */\r\n  </style>\r\n  "],"mappings":"AA6BE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,QAAQ,EAAE;IACRC,EAAEA,CAAA,EAAG;MACH,OAAOC,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC;IACnC;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,eAAe,EAAE,EAAE;MACnBC,eAAe,EAAE,IAAI;MACnBC,qBAAqB,EAAE;IAC3B,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI,CAACH,eAAc,GAAI,IAAI,CAACI,QAAQ,CAACC,MAAK,IAAK,CAAC;MAC9C,IAAI,CAACJ,qBAAoB,GAAI,IAAI,CAACG,QAAO,KAAM,IAAI,CAACE,cAAc;MAGlE,MAAMC,aAAY,GAAI,iDAAiD;MACzE,IAAI,CAACA,aAAa,CAACC,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAAC,EAAE;QACtC,IAAI,CAACJ,eAAc,GAAI,KAAK;QAC5B,IAAI,CAACS,aAAY,GAAI,0EAA0E;MACjG;MAGE,IAAI,IAAI,CAACC,eAAc,IAAK,IAAI,CAACC,YAAW,IAAK,IAAI,CAACX,eAAc,IAAK,IAAI,CAACC,qBAAqB,EAAE;QACvG,IAAI;UACF;UACA,MAAMW,GAAE,GAAI,MAAMpB,KAAK,CAACqB,IAAI,CAAE,WAAU,IAAI,CAACnB,EAAG,EAAC,EAAE;YACjDI,WAAW,EAAE,IAAI,CAACA,WAAW;YAC7BC,eAAe,EAAE,IAAI,CAACA;UACxB,CAAC,CAAC;UAEFe,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,GAAG,CAACf,IAAI,CAAC;;UAEzC;UACA,IAAI,CAACC,WAAU,GAAI,EAAE;UACrB,IAAI,CAACC,eAAc,GAAI,EAAE;;UAEzB;QACF,EAAE,OAAOiB,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAACC,QAAQ,CAACpB,IAAI,CAAC;QAChE;MACJ;IACE;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}