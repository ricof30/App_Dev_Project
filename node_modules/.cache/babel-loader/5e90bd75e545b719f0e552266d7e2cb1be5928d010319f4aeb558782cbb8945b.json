{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport * as XLSX from 'xlsx';\nexport default {\n  data() {\n    return {\n      excelData: []\n    };\n  },\n  methods: {\n    handleFileUpload() {\n      const fileInput = this.$refs.fileInput;\n      const file = fileInput.files[0];\n      if (file) {\n        this.readExcelFile(file);\n      }\n    },\n    readExcelFile(file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const data = new Uint8Array(e.target.result);\n        const workbook = XLSX.read(data, {\n          type: 'array'\n        });\n\n        // Assuming the first sheet is the target\n        const sheetName = workbook.SheetNames[0];\n        const sheet = workbook.Sheets[sheetName];\n\n        // Convert sheet data to JSON\n        const jsonData = XLSX.utils.sheet_to_json(sheet, {\n          header: 1\n        });\n\n        // Extract header and data\n        const [header, ...rows] = jsonData;\n\n        // Create an array of objects with headers as keys\n        this.excelData = rows.map((row, index) => {\n          const rowData = {};\n          header.forEach((key, columnIndex) => {\n            rowData[key] = row[columnIndex];\n          });\n          // Add a unique key for each row\n          rowData._rowNumber = index + 1;\n          return rowData;\n        });\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  }\n};","map":{"version":3,"names":["XLSX","data","excelData","methods","handleFileUpload","fileInput","$refs","file","files","readExcelFile","reader","FileReader","onload","e","Uint8Array","target","result","workbook","read","type","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","header","rows","map","row","index","rowData","forEach","key","columnIndex","_rowNumber","readAsArrayBuffer"],"sources":["C:\\laragon\\www\\frontend\\src\\views\\Upload.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <input type=\"file\" ref=\"fileInput\" @change=\"handleFileUpload\" accept=\".xlsx, .xls\" />\r\n  \r\n      <table v-if=\"excelData.length > 0\" border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th v-for=\"(value, key) in excelData[0]\" :key=\"key\">{{ key }}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"row in excelData\" :key=\"row._rowNumber\">\r\n            <td v-for=\"(value, key) in excelData[0]\" :key=\"key\">{{ row[key] }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import * as XLSX from 'xlsx';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        excelData: [],\r\n      };\r\n    },\r\n    methods: {\r\n      handleFileUpload() {\r\n        const fileInput = this.$refs.fileInput;\r\n        const file = fileInput.files[0];\r\n  \r\n        if (file) {\r\n          this.readExcelFile(file);\r\n        }\r\n      },\r\n      readExcelFile(file) {\r\n        const reader = new FileReader();\r\n  \r\n        reader.onload = (e) => {\r\n          const data = new Uint8Array(e.target.result);\r\n          const workbook = XLSX.read(data, { type: 'array' });\r\n  \r\n          // Assuming the first sheet is the target\r\n          const sheetName = workbook.SheetNames[0];\r\n          const sheet = workbook.Sheets[sheetName];\r\n  \r\n          // Convert sheet data to JSON\r\n          const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });\r\n  \r\n          // Extract header and data\r\n          const [header, ...rows] = jsonData;\r\n  \r\n          // Create an array of objects with headers as keys\r\n          this.excelData = rows.map((row, index) => {\r\n            const rowData = {};\r\n            header.forEach((key, columnIndex) => {\r\n              rowData[key] = row[columnIndex];\r\n            });\r\n            // Add a unique key for each row\r\n            rowData._rowNumber = index + 1;\r\n            return rowData;\r\n          });\r\n        };\r\n  \r\n        reader.readAsArrayBuffer(file);\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";;;AAoBE,OAAO,KAAKA,IAAG,MAAO,MAAM;AAE5B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,gBAAgBA,CAAA,EAAG;MACjB,MAAMC,SAAQ,GAAI,IAAI,CAACC,KAAK,CAACD,SAAS;MACtC,MAAME,IAAG,GAAIF,SAAS,CAACG,KAAK,CAAC,CAAC,CAAC;MAE/B,IAAID,IAAI,EAAE;QACR,IAAI,CAACE,aAAa,CAACF,IAAI,CAAC;MAC1B;IACF,CAAC;IACDE,aAAaA,CAACF,IAAI,EAAE;MAClB,MAAMG,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;MAE/BD,MAAM,CAACE,MAAK,GAAKC,CAAC,IAAK;QACrB,MAAMZ,IAAG,GAAI,IAAIa,UAAU,CAACD,CAAC,CAACE,MAAM,CAACC,MAAM,CAAC;QAC5C,MAAMC,QAAO,GAAIjB,IAAI,CAACkB,IAAI,CAACjB,IAAI,EAAE;UAAEkB,IAAI,EAAE;QAAQ,CAAC,CAAC;;QAEnD;QACA,MAAMC,SAAQ,GAAIH,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;QACxC,MAAMC,KAAI,GAAIL,QAAQ,CAACM,MAAM,CAACH,SAAS,CAAC;;QAExC;QACA,MAAMI,QAAO,GAAIxB,IAAI,CAACyB,KAAK,CAACC,aAAa,CAACJ,KAAK,EAAE;UAAEK,MAAM,EAAE;QAAE,CAAC,CAAC;;QAE/D;QACA,MAAM,CAACA,MAAM,EAAE,GAAGC,IAAI,IAAIJ,QAAQ;;QAElC;QACA,IAAI,CAACtB,SAAQ,GAAI0B,IAAI,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;UACxC,MAAMC,OAAM,GAAI,CAAC,CAAC;UAClBL,MAAM,CAACM,OAAO,CAAC,CAACC,GAAG,EAAEC,WAAW,KAAK;YACnCH,OAAO,CAACE,GAAG,IAAIJ,GAAG,CAACK,WAAW,CAAC;UACjC,CAAC,CAAC;UACF;UACAH,OAAO,CAACI,UAAS,GAAIL,KAAI,GAAI,CAAC;UAC9B,OAAOC,OAAO;QAChB,CAAC,CAAC;MACJ,CAAC;MAEDtB,MAAM,CAAC2B,iBAAiB,CAAC9B,IAAI,CAAC;IAChC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}