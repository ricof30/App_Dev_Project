{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  border: \"1\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"input\", {\n    type: \"file\",\n    ref: \"fileInput\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.handleFileUpload && $options.handleFileUpload(...args)),\n    accept: \".xlsx, .xls\"\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), $data.excelData.length > 0 ? (_openBlock(), _createElementBlock(\"table\", _hoisted_1, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.excelData[0], (value, key) => {\n    return _openBlock(), _createElementBlock(\"th\", {\n      key: key\n    }, _toDisplayString(key), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.excelData, row => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: row._rowNumber\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (value, key) => {\n      return _openBlock(), _createElementBlock(\"td\", {\n        key: key\n      }, _toDisplayString(value), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["border","_createElementBlock","_createElementVNode","type","ref","onChange","_cache","args","$options","handleFileUpload","accept","$data","excelData","length","_hoisted_1","_Fragment","_renderList","value","key","_toDisplayString","row","_rowNumber"],"sources":["C:\\laragon\\www\\frontend\\src\\views\\Upload.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <input type=\"file\" ref=\"fileInput\" @change=\"handleFileUpload\" accept=\".xlsx, .xls\" />\r\n      \r\n      <table v-if=\"excelData.length > 0\" border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th v-for=\"(value, key) in excelData[0]\" :key=\"key\">{{ key }}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"row in excelData\" :key=\"row._rowNumber\">\r\n            <td v-for=\"(value, key) in row\" :key=\"key\">{{ value }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import * as XLSX from 'xlsx';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        excelData: [],\r\n      };\r\n    },\r\n    methods: {\r\n      handleFileUpload() {\r\n        const fileInput = this.$refs.fileInput;\r\n        const file = fileInput.files[0];\r\n        \r\n        if (file) {\r\n          this.readExcelFile(file);\r\n        }\r\n      },\r\n      readExcelFile(file) {\r\n        const reader = new FileReader();\r\n        \r\n        reader.onload = (e) => {\r\n          const data = new Uint8Array(e.target.result);\r\n          const workbook = XLSX.read(data, { type: 'array' });\r\n          \r\n          // Assuming the first sheet is the target\r\n          const sheetName = workbook.SheetNames[0];\r\n          const sheet = workbook.Sheets[sheetName];\r\n          \r\n          // Convert sheet data to JSON\r\n          const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });\r\n          \r\n          // Extract header and data\r\n          const [header, ...rows] = jsonData;\r\n          \r\n          // Create an array of objects with headers as keys\r\n          this.excelData = rows.map((row, index) => {\r\n            const rowData = {};\r\n            header.forEach((key, columnIndex) => {\r\n              rowData[key] = row[columnIndex];\r\n            });\r\n            // Add a unique key for each row\r\n            rowData._rowNumber = index + 1;\r\n            return rowData;\r\n          });\r\n        };\r\n        \r\n        reader.readAsArrayBuffer(file);\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";;;EAIyCA,MAAM,EAAC;;;uBAH5CC,mBAAA,CAeM,cAdJC,mBAAA,CAAqF;IAA9EC,IAAI,EAAC,MAAM;IAACC,GAAG,EAAC,WAAW;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,gBAAA,IAAAD,QAAA,CAAAC,gBAAA,IAAAF,IAAA,CAAgB;IAAEG,MAAM,EAAC;kDAExDC,KAAA,CAAAC,SAAS,CAACC,MAAM,Q,cAA7BZ,mBAAA,CAWQ,SAXRa,UAWQ,GAVNZ,mBAAA,CAIQ,gBAHNA,mBAAA,CAEK,c,kBADHD,mBAAA,CAAkEc,SAAA,QAAAC,WAAA,CAAvCL,KAAA,CAAAC,SAAS,MAAxBK,KAAK,EAAEC,GAAG;yBAAtBjB,mBAAA,CAAkE;MAAxBiB,GAAG,EAAEA;IAAG,GAAAC,gBAAA,CAAKD,GAAG;sCAG9DhB,mBAAA,CAIQ,iB,kBAHND,mBAAA,CAEKc,SAAA,QAAAC,WAAA,CAFaL,KAAA,CAAAC,SAAS,EAAhBQ,GAAG;yBAAdnB,mBAAA,CAEK;MAFyBiB,GAAG,EAAEE,GAAG,CAACC;2BACrCpB,mBAAA,CAA2Dc,SAAA,QAAAC,WAAA,CAAhCI,GAAG,GAAlBH,KAAK,EAAEC,GAAG;2BAAtBjB,mBAAA,CAA2D;QAA1BiB,GAAG,EAAEA;MAAG,GAAAC,gBAAA,CAAKF,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}