{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'Register',\n  data() {\n    return {\n      FullName: '',\n      email: '',\n      emailError: '',\n      password: '',\n      passwordError: '',\n      repeatPassword: '',\n      isValidFullName: true,\n      isValidEmail: true,\n      isValidPassword: true,\n      isValidRepeatPassword: true\n    };\n  },\n  methods: {\n    async register() {\n      // Validate the form fields before proceeding\n      this.isValidFullName = !!this.FullName.trim();\n      this.isValidEmail = this.validateEmail(this.email);\n      this.isValidPassword = this.password.length >= 6; // Example: Password should be at least 6 characters\n      this.isValidRepeatPassword = this.password === this.repeatPassword;\n      const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@#])[A-Za-z\\d@#]+$/;\n      if (!passwordRegex.test(this.password)) {\n        this.isValidPassword = false;\n        this.passwordError = 'Password must contain at least one letter, one number, and one character';\n      }\n\n      // If all validations pass, proceed with registration logic\n      if (this.isValidFullName && this.isValidEmail && this.isValidPassword && this.isValidRepeatPassword) {\n        try {\n          const response = await axios.post(\"register\", {\n            name: this.FullName,\n            email: this.email,\n            password: this.password,\n            confirmpassword: this.repeatPassword\n          });\n          console.log(this.FullName);\n          console.log(response.data);\n          this.$router.push('/login');\n          // Handle the response accordingly, e.g., redirect to another page\n        } catch (error) {\n          console.error(error);\n          // if (error.response && error.response.status === 400 && error.response.data.error === 'Email already exists') {\n          this.isValidEmail = false;\n          this.emailError = 'Email already exists';\n\n          // Handle registration error\n        }\n      }\n    },\n\n    validateEmail(email) {\n      // Regular expression for a simple email validation\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      return emailRegex.test(email);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","FullName","email","emailError","password","passwordError","repeatPassword","isValidFullName","isValidEmail","isValidPassword","isValidRepeatPassword","methods","register","trim","validateEmail","length","passwordRegex","test","response","post","confirmpassword","console","log","$router","push","error","emailRegex"],"sources":["C:\\laragon\\www\\frontend\\src\\components\\Register.vue"],"sourcesContent":["  <template>\r\n      <body class=\"bg-gradient-primary\">\r\n      <div class=\"container containers\">\r\n        <div class=\"card o-hidden border-0 shadow-lg my-5\">\r\n          <div class=\"card-body p-0\">\r\n            <!-- Nested Row within Card Body -->\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-5 d-none d-lg-block\">\r\n                <img :src=\"require('@/assets/assets/img/dswd.png')\" alt=\"\" class=\"pic\">\r\n              </div>\r\n              <div class=\"col-lg-7\">\r\n                <div class=\"p-5\">\r\n                  <div class=\"text-center\">\r\n                    <h1 class=\"h4 text-gray-900 mb-4\">Create an Account!</h1>\r\n                  </div>\r\n                  <form class=\"user\" @submit.prevent=\"register\">\r\n                    <!-- Full Name Input -->\r\n                    <div class=\"form-group row\">\r\n                      <div>\r\n                        <input v-model=\"FullName\" type=\"text\" class=\"form-control form-control-user\" placeholder=\"Full Name\">\r\n                        <span v-if=\"!isValidFullName\" class=\"text-danger\">Please enter a valid name</span>\r\n                      </div>\r\n                    </div>\r\n                    <!-- Email Input -->\r\n                    <div class=\"form-group row\">\r\n                      <div>\r\n                        <input v-model=\"email\" type=\"email\" class=\"form-control form-control-user\" placeholder=\"Email\">\r\n                        <span v-if=\"!isValidEmail\" class=\"text-danger\">{{ emailError || 'Please enter a valid email' }}</span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <!-- for roles -->\r\n                    <div class=\"form-group row\">\r\n                      <div>\r\n                        <!-- <label for=\"role\">Select Role:</label> -->\r\n                        <select v-model=\"selectedRole\" class=\"form-control form-control-user\" id=\"role\" placeholder=\"Select your role\">\r\n                          <option value=\"validator\">Validator</option>\r\n                          <option value=\"encoder\">Encoder</option>\r\n                          <!-- Add more role options as needed -->\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n                    <!-- Password Input -->\r\n                    <div class=\"form-group row\">\r\n                      <div>\r\n                        <input v-model=\"password\" type=\"password\" class=\"form-control form-control-user\" placeholder=\"Password\">\r\n                        <span v-if=\"!isValidPassword\" class=\"text-danger\">{{ passwordError || 'Please enter a valid password' }}</span>\r\n                      </div>\r\n                    </div>\r\n                    <!-- Repeat Password Input -->\r\n                    <div class=\"form-group row\">\r\n                      <div>\r\n                        <input v-model=\"repeatPassword\" type=\"password\" class=\"form-control form-control-user\" placeholder=\"Repeat Password\">\r\n                        <span v-if=\"!isValidRepeatPassword\" class=\"text-danger\">Passwords do not match</span>\r\n                      </div>\r\n                    </div>\r\n                    <!-- Register Button -->\r\n                    <button  class=\"btn btn-primary btn-user btn-block\">Register Account</button>\r\n                  </form>\r\n                  <hr>\r\n                  <div class=\"text-center\">\r\n                    <a class=\"small\" href=\"forgot-password.html\">Forgot Password?</a>\r\n                  </div>\r\n                  <div class=\"text-center\">\r\n                      <router-link to=\"login\">Already have an account? Login!</router-link>\r\n                    <!-- <a class=\"small\" href=\"login.html\">Already have an account? Login!</a> -->\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </body>\r\n    </template>\r\n    \r\n    <script>\r\n    import axios from 'axios';\r\n    export default {\r\n      name: 'Register',\r\n      data() {\r\n        return {\r\n          FullName: '',\r\n          email: '',\r\n          emailError: '',\r\n          password: '',\r\n          passwordError: '',\r\n          repeatPassword: '',\r\n          isValidFullName: true,\r\n          isValidEmail: true,\r\n          isValidPassword: true,\r\n          isValidRepeatPassword: true,\r\n        };\r\n      },\r\n      methods: {\r\n        async register() {\r\n          // Validate the form fields before proceeding\r\n          this.isValidFullName = !!this.FullName.trim();\r\n          this.isValidEmail = this.validateEmail(this.email);\r\n          this.isValidPassword = this.password.length >= 6; // Example: Password should be at least 6 characters\r\n          this.isValidRepeatPassword = this.password === this.repeatPassword;\r\n\r\n          const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@#])[A-Za-z\\d@#]+$/;\r\n        if (!passwordRegex.test(this.password)) {\r\n          this.isValidPassword = false;\r\n          this.passwordError = 'Password must contain at least one letter, one number, and one character';\r\n        }\r\n    \r\n          // If all validations pass, proceed with registration logic\r\n          if (this.isValidFullName && this.isValidEmail && this.isValidPassword && this.isValidRepeatPassword) {\r\n            try {\r\n              const response = await axios.post(\"register\", {\r\n                name: this.FullName,\r\n                email: this.email,\r\n                password: this.password,\r\n                confirmpassword: this.repeatPassword,\r\n          \r\n              });\r\n                    console.log(this.FullName);\r\n              console.log(response.data);\r\n              this.$router.push('/login');\r\n              // Handle the response accordingly, e.g., redirect to another page\r\n            } catch (error) {\r\n              console.error(error);\r\n              // if (error.response && error.response.status === 400 && error.response.data.error === 'Email already exists') {\r\n            this.isValidEmail = false;\r\n            this.emailError = 'Email already exists';\r\n          \r\n              // Handle registration error\r\n            }\r\n          }\r\n        },\r\n        validateEmail(email) {\r\n          // Regular expression for a simple email validation\r\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n          return emailRegex.test(email);\r\n        },\r\n      },\r\n    };\r\n    </script>\r\n    \r\n    <style>\r\n    @import '../assets/assets/css/sb-admin-2.min.css';\r\n    @import '../assets/assets/vendor/fontawesome-free/css/all.min.css';\r\n    @import '../assets/assets/css/style.css';\r\n    </style>\r\n    "],"mappings":";AA6EI,OAAOA,KAAI,MAAO,OAAO;AACzB,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE,EAAE;MACZC,aAAa,EAAE,EAAE;MACjBC,cAAc,EAAE,EAAE;MAClBC,eAAe,EAAE,IAAI;MACrBC,YAAY,EAAE,IAAI;MAClBC,eAAe,EAAE,IAAI;MACrBC,qBAAqB,EAAE;IACzB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,QAAQA,CAAA,EAAG;MACf;MACA,IAAI,CAACL,eAAc,GAAI,CAAC,CAAC,IAAI,CAACN,QAAQ,CAACY,IAAI,CAAC,CAAC;MAC7C,IAAI,CAACL,YAAW,GAAI,IAAI,CAACM,aAAa,CAAC,IAAI,CAACZ,KAAK,CAAC;MAClD,IAAI,CAACO,eAAc,GAAI,IAAI,CAACL,QAAQ,CAACW,MAAK,IAAK,CAAC,EAAE;MAClD,IAAI,CAACL,qBAAoB,GAAI,IAAI,CAACN,QAAO,KAAM,IAAI,CAACE,cAAc;MAElE,MAAMU,aAAY,GAAI,iDAAiD;MACzE,IAAI,CAACA,aAAa,CAACC,IAAI,CAAC,IAAI,CAACb,QAAQ,CAAC,EAAE;QACtC,IAAI,CAACK,eAAc,GAAI,KAAK;QAC5B,IAAI,CAACJ,aAAY,GAAI,0EAA0E;MACjG;;MAEE;MACA,IAAI,IAAI,CAACE,eAAc,IAAK,IAAI,CAACC,YAAW,IAAK,IAAI,CAACC,eAAc,IAAK,IAAI,CAACC,qBAAqB,EAAE;QACnG,IAAI;UACF,MAAMQ,QAAO,GAAI,MAAMpB,KAAK,CAACqB,IAAI,CAAC,UAAU,EAAE;YAC5CpB,IAAI,EAAE,IAAI,CAACE,QAAQ;YACnBC,KAAK,EAAE,IAAI,CAACA,KAAK;YACjBE,QAAQ,EAAE,IAAI,CAACA,QAAQ;YACvBgB,eAAe,EAAE,IAAI,CAACd;UAExB,CAAC,CAAC;UACIe,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrB,QAAQ,CAAC;UAChCoB,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAClB,IAAI,CAAC;UAC1B,IAAI,CAACuB,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;UAC3B;QACF,EAAE,OAAOC,KAAK,EAAE;UACdJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;UACpB;UACF,IAAI,CAACjB,YAAW,GAAI,KAAK;UACzB,IAAI,CAACL,UAAS,GAAI,sBAAsB;;UAEtC;QACF;MACF;IACF,CAAC;;IACDW,aAAaA,CAACZ,KAAK,EAAE;MACnB;MACA,MAAMwB,UAAS,GAAI,4BAA4B;MAC/C,OAAOA,UAAU,CAACT,IAAI,CAACf,KAAK,CAAC;IAC/B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}