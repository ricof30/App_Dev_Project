{"ast":null,"code":"import { createElementVNode as _createElementVNode, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0ecd383b\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Upload Excel File\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"file\"\n}, \"Select Excel File:\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  type: \"file\",\n  id: \"file\",\n  ref: \"fileInput\",\n  accept: \".xlsx, .xls\",\n  required: \"\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Upload\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"form\", {\n    onSubmit: _cache[0] || (_cache[0] = _withModifiers((...args) => $options.uploadFile && $options.uploadFile(...args), [\"prevent\"]))\n  }, [_hoisted_2, _createElementVNode(\"input\", _hoisted_3, null, 512 /* NEED_PATCH */), _hoisted_4, _hoisted_5], 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"names":["_createElementVNode","for","type","id","ref","accept","required","_createElementBlock","_hoisted_1","onSubmit","_cache","_withModifiers","args","$options","uploadFile","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5"],"sources":["C:\\laragon\\www\\frontend\\src\\views\\Upload.vue"],"sourcesContent":["<!-- <template>\r\n    <div>\r\n      <input type=\"file\" ref=\"fileInput\" @change=\"handleFileUpload\" accept=\".xlsx, .xls\" />\r\n  \r\n      <table v-if=\"excelData.length > 0\" border=\"1\">\r\n        <thead>\r\n          <tr>\r\n            <th v-for=\"(key, index) in Object.keys(excelData[0])\" :key=\"index\">{{ key }}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"row in excelData\" :key=\"row._rowNumber\">\r\n            <td v-for=\"key in Object.keys(excelData[0])\" :key=\"key\">{{ row[key] }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import * as XLSX from 'xlsx';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        excelData: [],\r\n      };\r\n    },\r\n    methods: {\r\n      handleFileUpload() {\r\n        const fileInput = this.$refs.fileInput;\r\n        const file = fileInput.files[0];\r\n  \r\n        if (file) {\r\n          this.readExcelFile(file);\r\n        }\r\n      },\r\n      readExcelFile(file) {\r\n        const reader = new FileReader();\r\n  \r\n        reader.onload = (e) => {\r\n          const data = new Uint8Array(e.target.result);\r\n          const workbook = XLSX.read(data, { type: 'array' });\r\n  \r\n          // Assuming the first sheet is the target\r\n          const sheetName = workbook.SheetNames[0];\r\n          const sheet = workbook.Sheets[sheetName];\r\n  \r\n          // Convert sheet data to JSON\r\n          const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });\r\n  \r\n          // Debugging: Log header and rows\r\n          console.log('Header:', jsonData[0]);\r\n          console.log('Rows:', jsonData.slice(1));\r\n  \r\n          // Extract header and data\r\n          const [header, ...rows] = jsonData;\r\n  \r\n          // Create an array of objects with headers as keys\r\n          this.excelData = rows.map((row, index) => {\r\n            const rowData = {};\r\n            header.forEach((key, columnIndex) => {\r\n              rowData[key] = row[columnIndex];\r\n            });\r\n            // Add a unique key for each row\r\n            rowData._rowNumber = index + 1;\r\n            return rowData;\r\n          });\r\n  \r\n          // Debugging: Log the processed Excel data\r\n          console.log('Processed Excel Data:', this.excelData);\r\n        };\r\n  \r\n        reader.readAsArrayBuffer(file);\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n   -->\r\n\r\n   <template>\r\n    <div>\r\n      <h2>Upload Excel File</h2>\r\n  \r\n      <form @submit.prevent=\"uploadFile\">\r\n        <label for=\"file\">Select Excel File:</label>\r\n        <input type=\"file\" id=\"file\" ref=\"fileInput\" accept=\".xlsx, .xls\" required>\r\n        <br>\r\n        <button type=\"submit\">Upload</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    methods: {\r\n        setup() {\r\n    async function loadScript(src) {\r\n      return new Promise((resolve, reject) => {\r\n        const script = document.createElement('script');\r\n        script.src = src;\r\n        script.onload = resolve;\r\n        script.onerror = reject;\r\n        document.head.appendChild(script);\r\n      });\r\n    }\r\n\r\n    async function loadScriptsInOrder(scriptUrls) {\r\n      for (const url of scriptUrls) {\r\n        await loadScript(url);\r\n      }\r\n    }\r\n\r\n    onMounted(async () => {\r\n        // // await loadScript('../vendor/chart.js/Chart.min.js'); \r\n        // await loadScript('../vendor/jquery/jquery.min.js'); \r\n      await loadScriptsInOrder([\r\n      '../js/server.js',    \r\n      ]);\r\n    });\r\n},\r\n      async uploadFile() {\r\n        try {\r\n          const fileInput = this.$refs.fileInput;\r\n          const file = fileInput.files[0];\r\n  \r\n          if (!file) {\r\n            console.error('No file selected');\r\n            return;\r\n          }\r\n  \r\n          const formData = new FormData();\r\n          formData.append('file', file);\r\n  \r\n          const response = await fetch('http://localhost:8000/upload', {\r\n            method: 'POST',\r\n            body: formData,\r\n          });\r\n  \r\n          if (response.ok) {\r\n            console.log('File uploaded successfully.');\r\n          } else {\r\n            console.error('File upload failed.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Internal server error:', error.message);\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add your custom styles here */\r\n  </style>\r\n  "],"mappings":";;gEAkFMA,mBAAA,CAA0B,YAAtB,mBAAiB;gEAGnBA,mBAAA,CAA4C;EAArCC,GAAG,EAAC;AAAM,GAAC,oBAAkB;;EAC7BC,IAAI,EAAC,MAAM;EAACC,EAAE,EAAC,MAAM;EAACC,GAAG,EAAC,WAAW;EAACC,MAAM,EAAC,aAAa;EAACC,QAAQ,EAAR;;gEAClEN,mBAAA,CAAI;gEACJA,mBAAA,CAAqC;EAA7BE,IAAI,EAAC;AAAQ,GAAC,QAAM;;;uBAPhCK,mBAAA,CASM,cARJC,UAA0B,EAE1BR,mBAAA,CAKO;IALAS,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;MAC/BG,UAA4C,EAC5Cf,mBAAA,CAA2E,SAA3EgB,UAA2E,+BAC3EC,UAAI,EACJC,UAAqC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}