{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Row\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Column\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Value\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, $data.data ? (_openBlock(), _createElementBlock(\"table\", _hoisted_2, [_hoisted_3, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.data, (row, rowIndex) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: rowIndex\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (cell, columnIndex) => {\n      return _openBlock(), _createElementBlock(\"td\", {\n        key: columnIndex\n      }, _toDisplayString(cell), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","type","_createElementBlock","_hoisted_1","$data","data","_hoisted_2","_hoisted_3","_Fragment","_renderList","row","rowIndex","key","cell","columnIndex","_toDisplayString"],"sources":["C:\\laragon\\www\\frontend\\src\\views\\Upload.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <input type=\"text\" />\r\n    <table v-if=\"data\">\r\n      <thead>\r\n        <tr>\r\n          <th>Row</th>\r\n          <th>Column</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(row, rowIndex) in data\" :key=\"rowIndex\">\r\n          <td v-for=\"(cell, columnIndex) in row\" :key=\"columnIndex\">{{ cell }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name:'Upload',\r\n  data() {\r\n    return {\r\n      data: null\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    async handleFileUpload(event) {\r\n      const file = event.target.files[0];\r\n\r\n      const formData = new FormData();\r\n      formData.append('excelFile', file);\r\n\r\n      try {\r\n        const response = await axios.post('/upload', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          const data = await this.parseExcelData(file);\r\n          this.data = data;\r\n        } else {\r\n          console.error('Error uploading file.');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    async parseExcelData(file) {\r\n      const workbook = XLSX.readFile(file);\r\n      const firstSheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[firstSheetName];\r\n\r\n      const data = XLSX.utils.sheet_to_json(worksheet, { raw: true });\r\n      return data;\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";gCAEIA,mBAAA,CAAqB;EAAdC,IAAI,EAAC;AAAM;;;;gCAEhBD,mBAAA,CAMQ,gB,aALNA,mBAAA,CAIK,a,aAHHA,mBAAA,CAAY,YAAR,KAAG,G,aACPA,mBAAA,CAAe,YAAX,QAAM,G,aACVA,mBAAA,CAAc,YAAV,OAAK,E;;;uBAPjBE,mBAAA,CAgBM,cAfJC,UAAqB,EACRC,KAAA,CAAAC,IAAI,I,cAAjBH,mBAAA,CAaQ,SAAAI,UAAA,GAZNC,UAMQ,EACRP,mBAAA,CAIQ,iB,kBAHNE,mBAAA,CAEKM,SAAA,QAAAC,WAAA,CAFyBL,KAAA,CAAAC,IAAI,GAAtBK,GAAG,EAAEC,QAAQ;yBAAzBT,mBAAA,CAEK;MAFgCU,GAAG,EAAED;IAAQ,K,kBAChDT,mBAAA,CAAyEM,SAAA,QAAAC,WAAA,CAAvCC,GAAG,GAAzBG,IAAI,EAAEC,WAAW;2BAA7BZ,mBAAA,CAAyE;QAAjCU,GAAG,EAAEE;MAAW,GAAAC,gBAAA,CAAKF,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}